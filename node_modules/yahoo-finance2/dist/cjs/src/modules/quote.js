"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const queryOptionsDefaults = {};
function quote(query, queryOptionsOverrides, moduleOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const symbols = typeof query === "string" ? query : query.join(",");
        const returnAs = queryOptionsOverrides && queryOptionsOverrides.return;
        const results = yield this._moduleExec({
            moduleName: "quote",
            query: {
                url: "https://query2.finance.yahoo.com/v7/finance/quote",
                schemaKey: "#/definitions/QuoteOptions",
                defaults: queryOptionsDefaults,
                runtime: { symbols },
                overrides: queryOptionsOverrides,
                transformWith(queryOptions) {
                    // Options validation ensures this is a string[]
                    if (queryOptions.fields)
                        queryOptions.fields.join(",");
                    // Don't pass this on to Yahoo
                    delete queryOptions.return;
                    return queryOptions;
                },
            },
            result: {
                schemaKey: "#/definitions/QuoteResponseArray",
                transformWith(result) {
                    if (!result.quoteResponse)
                        throw new Error("Unexpected result: " + JSON.stringify(result));
                    return result.quoteResponse.result;
                },
            },
            moduleOptions,
        });
        if (returnAs) {
            switch (returnAs) {
                case "array":
                    return results;
                case "object":
                    const object = {};
                    for (let result of results)
                        object[result.symbol] = result;
                    return object; // TODO: type
                case "map":
                    const map = new Map();
                    for (let result of results)
                        map.set(result.symbol, result);
                    return map; // TODO: type
            }
        }
        else {
            // By default, match the query input shape (string or string[]).
            return typeof query === "string"
                ? results[0]
                : results;
        }
    });
}
exports.default = quote;
